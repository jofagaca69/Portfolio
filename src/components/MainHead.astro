---
import '../styles/global.scss';

interface Props {
    title?: string | undefined;
    description?: string | undefined;
}

const {
    title = 'Jose Garcia - Fullstack developer/Angular, React, Django and more',
    description = `I'm Jose Garcia, a fullstack developer with 4+ years of experience in Angular, React, Django, and more. From frontend to backend, I build scalable web apps. Explore my portfolio!`,
    keywords = [
        "Fullstack Developer",
        "Angular Developer",
        "React Developer",
        "Django Developer",
        "Frontend Developer",
        "Backend Developer",
        "JavaScript Developer",
        "TypeScript Developer",
        "Java Developer",
        "Python Developer",
        "Web Development",
        "Software Development",
        "Web Applications",
        "Scalable Applications",
        "Portfolio",
        "Colombian Developer",
        "Spanish speaker developer"
    ]
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width" />
<meta name="keywords" content={keywords.join(", ")} />
<meta name="robots" content="index, follow">
<meta name="author" content="José Fabián García Camargo">
<!--Completar estos metatags-->
<meta property="og:title" content={title}>
<meta property="og:description" content={description}>
<meta property="og:image" content="URL de una imagen para compartir en redes sociales">
<meta property="og:url" content="URL de tu sitio web">

<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<link rel="icon" type="image/svg+xml" href="/assets/favicon.svg" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
        href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
        rel="stylesheet"
/>
<script is:inline>
    // This code is inlined in the head to make dark mode instant & blocking.
    const getThemePreference = () => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
            return localStorage.getItem('theme');
        }
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    };
    const isDark = getThemePreference() === 'dark';
    document.documentElement.classList[isDark ? 'add' : 'remove']('theme-dark');

    if (typeof localStorage !== 'undefined') {
        // Watch the document element and persist user preference when it changes.
        const observer = new MutationObserver(() => {
            const isDark = document.documentElement.classList.contains('theme-dark');
            localStorage.setItem('theme', isDark ? 'dark' : 'light');
        });
        observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
    }
</script>
